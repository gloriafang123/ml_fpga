import numpy as np
import pickle
# w, b = pickle.load(open('mnist_weights_small.pkl', 'rb'))

# def relu(x):
#     return np.maximum(x, 0)

# w1 = np.array([w[0:3]])
# w2 = np.array(w[3:12]).reshape((3, 3))
# w3 = np.array([w[12:15]])
# b1 = np.array(b[0:3])
# b2 = np.array(b[3:6])
# b3 = np.array(b[6])

# print(w1)
# print(w2)
# print(w3)
# print(b1)
# print(b2)
# print(b3)

def f(x):
    x_in = np.array([x])
    return w3@relu(w2@relu(w1.T@x_in+b1)+b2)+b3

def make_plot():
    from matplotlib import pyplot as plt
    xs = np.linspace(-30, 10, 100)
    ys = [f(i) for i in xs]
    plt.plot(xs, ys)
    plt.plot(xs, xs, color='r')
    plt.show()

def int_to_bin(x):
    return '{:024b}'.format(x)

def generate_verilog_testbench_weights():
    l = [249, 5, 252, 254, 252, 253, 0, 252, 7, 5, 255, 3, 253, 248, 250, 255, 2, 8, 4, 7, 2, 16]

    for i in range(15):
        print('weights[{}] = 8\'b{};'.format(i, int_to_bin(l[i])))

    for i in range(7):
        print('biases[{}] = 8\'b{};'.format(i, int_to_bin(l[15+i])))

def generate_iris_null_weights():
    w = [253, 3, 254, 256, 3, 7, 248, 249, 254, 253, 253, 2, 4, 12, 2, 253, 252, 253, 3, 2, 4, 9, 241, 2, 251, 4, 2, 252, 2, 253]
    for i in range(30):
        print('        weights[{}] = 8\'b{};'.format(i, int_to_bin(w[i])))

    b = [2, 3, 255, 256, 15, 0, 250, 6, 3]
    for i in range(9):
        print('        biases[{}] = 8\'b{};'.format(i, int_to_bin(b[i])))

def generate_mnist_weights():
    x = [16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16742176, 16738227, 1033, 16755269, 16743659, 16744448, 16744448, 16744448, 16744448, 16743959, 29087, 7804, 16765775, 9317, 17123, 16744361, 16744448, 16744448, 16744448, 16741815, 30243, 16744632, 16744448, 16744867, 32659, 16739301, 16744448, 16744448, 16744448, 16759483, 16770715, 16744448, 16744448, 16744448, 13677, 16738413, 16744448, 16744448, 16744448, 16773426, 16738731, 16744448, 16744448, 16744448, 12948, 16738406, 16744448, 16744448, 16744448, 16908, 16738809, 16744448, 16744448, 16745979, 37473, 16743940, 16744448, 16744448, 16744448, 16771908, 16766947, 16765795, 1566, 35360, 16741736, 16744448, 16744448, 16744448, 16744448, 16743109, 11702, 14298, 16772339, 16738746, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448, 16744448]
    w = [16755296, 16777193, 16761821, 16751532, 16753568, 16771425, 16765070, 16773469, 16748779, 16760830, 16758742, 16749250, 14620, 52192, 42956, 37894, 37732, 11777, 16771807, 16758187, 16768342, 18137, 17198, 9885, 5392, 4967, 8486, 16775431, 16776081, 16752936, 16750767, 18162, 16744010, 16725193, 16739288, 16772201, 1901, 7370, 21638, 16754848, 16756992, 16710035, 16715306, 16768589, 28753, 16762414, 16753304, 16755995, 1955, 16774295, 16761465, 11290, 33231, 19337, 11707, 16760454, 12860, 19126, 11228, 2814, 16770507, 60644, 23758, 16746939, 16729700, 16767311, 41843, 42436, 15276, 16773346, 16774244, 47224, 49854, 38269, 18866, 21760, 31229, 29210, 16775715, 16776157, 16750760, 34977, 10351, 20299, 23113, 12778, 16776001, 16764980, 4695, 16773659, 16758279, 16776111, 16748732, 16745104, 16765113, 16766492, 3356, 16768054, 16750820, 16768282, 16750173, 16765394, 16764806, 16770028, 16774929, 16768721, 16766727, 16762464, 16757169, 16763249, 16762009, 16773880, 16766082, 30934, 28004, 30429, 20328, 16773377, 16753892, 16768414, 16763779, 16755881, 16766340, 15780, 18462, 29842, 9110, 6832, 83, 16754600, 16752084, 16759746, 3881, 16773202, 16758606, 16764891, 16763797, 5858, 20935, 16768749, 16750792, 16755273, 16743741, 16751033, 6058, 55755, 16771741, 16764341, 8522, 16764862, 16755735, 16760700, 16760352, 16775324, 80739, 57176, 16771521, 16734252, 16701520, 16752777, 16769620, 16772332, 3621, 16772783, 22631, 16772606, 16768364, 16774604, 6558, 16758343, 16745816, 17850, 57563, 22620, 16767210, 21427, 41479, 46805, 12552, 16745362, 16758355, 4700, 16776184, 16491, 23495, 21466, 32400, 31170, 7451, 16766243, 16769371, 16747327, 16754710, 22734, 25835, 11710, 18096, 4285, 16763043, 16763782, 16776462, 16763739, 11029, 6404, 16763516, 18956, 18618, 16763938, 16762160, 5306, 9526, 16763269, 27, 16776005, 16776119, 16764806, 16764555, 16764862, 16763623, 16762990, 10532, 7778, 9805, 28294, 22163, 12653, 10968, 10121, 16754820, 10193, 16764277, 17546, 34016, 26735, 6391, 13738, 9125, 8748, 3807, 17236, 16760589, 16727889, 16694035, 16700213, 16700875, 16750973, 16742290, 16729297, 16707865, 16775914, 16775226, 16728044, 16742422, 16766598, 14243, 13085, 16764079, 16754649, 16761014, 36912, 16769173, 12014, 21154, 16771452, 29825, 14573, 16766339, 16768949, 24177, 16776091, 16762006, 27345, 30030, 16248, 10304, 4610, 14841, 33890, 64719, 6705, 10258, 7042, 15564, 10105, 8036, 6609, 4766, 6550, 16775256, 555, 16762333, 16775425, 5996, 17490, 17276, 6468, 6009, 16754240, 4056, 777, 124, 4731, 4472, 7372, 16775885, 2824, 16768675, 11411, 16762070, 11715, 8155, 3101, 16761777, 2963, 16758540, 16766698, 23281, 9497, 17506, 16771477, 16760607, 16745993, 16773871, 18868, 16770461, 16758442, 16776243, 8433, 27264, 16773782, 16765430, 16743533, 16757140, 7340, 16751502, 16705405, 16751547, 16775844, 5563, 16771137, 16762506, 16755094, 16773249, 10928, 7331, 16764137, 16762412, 16769597, 22981, 16760345, 16767391, 16773105, 62914, 78011, 68410, 48645, 43294, 3075, 16776053, 16759906, 16775441, 16770268, 36649, 9120, 20005, 29463, 36059, 18014, 16774341, 16773067, 16770720, 16759674, 16764430, 16772841, 15724, 19905, 19712, 354, 16770236, 7744, 16768176, 16759220, 16743960, 16763623, 16772639, 16770122, 4275, 36008, 4115, 6365, 13406, 16763846, 16747494, 16717933, 16726429, 16714508, 16710882, 16737024, 16764424, 16769012, 16773722, 4144, 8018, 16774582, 16760808, 16763255, 16757490, 16768610, 11569, 16771900, 16760995, 7293, 11045, 16770863, 16745723, 16751788, 16766007, 16761302, 16760423, 16770230, 16775891, 22638, 29368, 31946, 4025, 1815, 16775632, 1814, 16762356, 16763512, 16774502, 14036, 16776134, 16776404, 16748194, 16758741, 5666, 3909, 16727946, 16765918, 16767667, 16773627, 16758634, 16770318, 16763241, 60621, 30865, 9620, 16748319, 5262, 16765140, 24644, 40412, 33493, 57167, 94682, 64230, 9186, 16754615, 3826, 16771591, 16773027, 16771246, 16741059, 16775105, 40377, 16016, 2183, 16764186, 16776746, 7804, 16760421, 16731052, 16723740, 16739042, 16764962, 16762467, 16739092, 16711022, 16773147, 16762187, 16775829, 16769909, 16764881, 16748346, 16755152, 16772236, 16775631, 16759639, 16762999, 16765187, 16766297, 7923, 2018, 16772830, 19084, 11623, 1139, 8932, 1947, 1245, 16771163, 16754643, 16772456, 16752857, 16757301, 16755322, 16769784, 298, 16759782, 16760835, 2696, 16740615, 16731033, 16722304, 16733405, 16768031, 5036, 31157, 16764108, 16767844, 16748963, 16774688, 23387, 15704, 7857, 25045, 40461, 57376, 6972, 16758360, 16776473, 11612, 17514, 9205, 16769503, 16772527, 17673, 83082, 18840, 16757441, 17772, 22869, 34227, 31476, 27852, 16755560, 16710630, 16703861, 16772590, 16770906, 16766122, 27562, 20653, 34226, 39087, 22225, 16776931, 16747260, 16754045, 16768957, 16768099, 16771814, 16690011, 16712947, 1926, 3758, 16774219, 16725978, 16769661, 16770196, 16775983, 14972, 16765203, 16749558, 6449, 16360, 16689, 16768733, 16764528, 16759499, 16775491, 4868, 30412, 17556, 18738, 20677, 16769157, 16760281, 16757248, 16768548, 5503, 16775604, 13850, 14694, 16777201, 1542, 16764170, 16770071, 16757472, 16762927, 16758942, 16756353, 16747402, 16748953, 16772051, 16759292, 16755790, 16760741, 16766349, 16753845, 16773678, 16757476, 16738034, 16747400, 16757926, 16761416, 16756921, 16760306, 16766520, 16758506, 16751454, 3221, 44446, 40056, 53438, 44968, 23497, 16763110, 16742789, 16776932, 16776969, 26706, 54227, 29985, 16764893, 28224, 49554, 36991, 16775743, 16757096, 16763830, 1380, 16769344, 16728237, 16738932, 4263, 23404, 29761, 16763098, 16764164, 1929, 44816, 57157, 17139, 5393, 26294, 16745231, 16736116, 16766407, 16751733, 16759221, 32726, 11457, 16775079, 3541, 1063, 16756508, 16761150, 16757466, 16751863, 16761937, 16774825, 16752745, 16757373, 16762682, 16770848, 5002, 16770122, 16769779, 16771769, 16740779, 16771750, 17387, 28858, 11167, 4569, 30179, 24198, 16764962, 16750676, 16763030, 15215, 48860, 56768, 56271, 58293, 21453, 16772644, 16776460, 16290, 71792, 16775010, 16728819, 35674, 42689, 52099, 16702903, 69758, 19235, 16756759, 16185, 16769161, 16736920, 62796, 16701807, 16752075, 16775236, 54309, 50742, 16775161, 33299, 95747, 17177, 63506, 16757851, 46982, 16707142, 29083, 16768526, 16700885, 55589, 27134, 16765123, 82175, 29710, 32333, 108126, 66255, 28164, 16722814, 16724685, 16669632, 16748710, 33266, 16684, 10965, 72753, 20433, 81799, 28861, 40366, 16720170, 38338, 16740952, 67229, 16774857, 25123, 60090, 16760780, 16688115, 58078, 63199, 16768396, 16749899, 16761340, 16745894, 16756476, 16775041, 16741869, 16704217, 30010, 5171, 13821, 51437, 16722535, 16670239, 16775276, 96303, 16765971, 21948, 25522, 16758223, 37218, 16637061, 16765793, 16769717, 16727677, 16730178, 382, 16745763, 12477, 42825, 16764345, 16770071, 79440, 16737435, 18072, 64569, 3627, 34642, 16702596, 23615, 42055, 16704801, 16739414, 16755854, 71743, 16743550, 34234, 16769189, 35989, 12841, 5672, 51505, 16749991, 16775978, 16678426, 16664958, 15909, 16767405, 16671416, 16776261, 60421, 16749476, 16756222, 16762107, 16722201, 53724, 4095, 16756691, 16768049, 16763260, 21142, 52888, 53235, 16671493, 16585490, 64293, 16751262, 16772866, 43344, 87964, 16711585, 16722780, 19120, 42115, 67292, 16756098, 16744737, 24026, 16776783, 16666835, 48741, 29029, 16708955, 16738528, 16744955, 1838, 15010, 56119, 15226, 16745380, 16759315, 19547, 16680010, 16776808, 16769813, 16684001, 16760564]
    b = [15464, 17935, 1852, 1777, 908, 8310, 14079, 16741732, 20768, 16759305, 16768551, 16766609, 16727287, 1462, 16732557, 1631, 0, 158184, 96980, 16708123, 16705660, 16691140, 22130, 16776649, 16769992, 16771463, 46722]

    for i in range(100):
        print('        x[{}] = 24\'b{};'.format(i, int_to_bin(x[i])))

    for i in range(870):
        print('        weights[{}] = 24\'b{};'.format(i, int_to_bin(w[i])))

    for i in range(27):
        print('        biases[{}] = 24\'b{};'.format(i, int_to_bin(b[i])))



generate_mnist_weights()

def byte_complement_numerical(a, decimal_bits, total_bits=8):
    if (a>=0):
        return round(a*2**decimal_bits)
    else:
        return 2**total_bits + round(a*2**decimal_bits)

f = lambda x:byte_complement_numerical(x, 16, 24)
